Parameters:
  S3BucketName:
    Type: String

Resources:
  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Lambda function to upload data to dynamodb
      Handler: index.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/calculatorLambda'
      Code:
        ZipFile: |
          import boto3
          s3 = boto3.client('s3')
          dynamodb = boto3.resource('dynamodb')
          def lambda_handler(event, context):
          #print(event)
            bucket = event['Records'][0]['s3']['bucket']['name']
            key = event['Records'][0]['s3']['object']['key']  
  
            obj = s3.get_object(Bucket=bucket, Key=key)
            rows = obj['Body'].read().decode("UTF-8").split()
  
            table = dynamodb.Table('harish')
            for row in rows[1:]:
              id,first_name,last_name,email,phone_no=row.split(',')
              table.put_item(
              Item={
                'id': int(id),
                'first_name':first_name,
                'last_name':last_name,
                'email':email,
                'phone_no':phone_no,
              }
            )
      Runtime: python3.7
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:aws:s3:::${S3BucketName}'
  
  S3Bucket:
    DependsOn: LambdaInvokePermission
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: "s3:ObjectCreated:*"
          Function: !GetAtt MyLambdaFunction.Arn
